buildscript {
  repositories {
    mavenLocal()
  }
}

plugins {
  id 'com.github.sherter.google-java-format' version '0.6'
  id "net.ltgt.apt" version "0.10"
//  id "com.palantir.jacoco-coverage" version "0.4.0"
  id "com.palantir.jacoco-full-report" version "0.4.0"
}

apply plugin: 'java'
//apply plugin: 'java-library'

repositories {
  jcenter()
}

dependencies {
  apt 'com.google.auto.value:auto-value:1.2'
  compile 'uk.co.xfactory-librarians:coremidi4j:1.0'
  compileOnly 'com.google.auto.value:auto-value:1.2'
  implementation 'com.google.guava:guava:20.0'
  testCompile "com.google.truth:truth:0.31"
  testCompile "com.google.truth.extensions:truth-java8-extension:0.32"
  testCompile 'org.mockito:mockito-core:2.+'
  testImplementation 'junit:junit:4.12'
}

// TODO make task that includes this boilerplate
task allBlue(type: JavaExec) {
  classpath = sourceSets.main.runtimeClasspath
  main = 'com.salisburyclan.lpviewport.apps.AllBlue'
  if (project.hasProperty('layout')) {
    args = ["--layout=${layout}"]
  }
  if (project.hasProperty('device')) {
    args += ["--device=${device}"]
  }
}

task rainbow(type: JavaExec) {
  classpath = sourceSets.main.runtimeClasspath
  main = 'com.salisburyclan.lpviewport.apps.Rainbow'
  if (project.hasProperty('layout')) {
    args = ["--layout=${layout}"]
  }
  if (project.hasProperty('device')) {
    args += ["--device=${device}"]
  }
}

task circle(type: JavaExec) {
  classpath = sourceSets.main.runtimeClasspath
  main = 'com.salisburyclan.lpviewport.apps.Circle'
  if (project.hasProperty('layout')) {
    args = ["--layout=${layout}"]
  }
  if (project.hasProperty('device')) {
    args += ["--device=${device}"]
  }
}

task circleexplode(type: JavaExec) {
  classpath = sourceSets.main.runtimeClasspath
  main = 'com.salisburyclan.lpviewport.apps.CircleExplodeApp'
  if (project.hasProperty('layout')) {
    args = ["--layout=${layout}"]
  }
  if (project.hasProperty('device')) {
    args += ["--device=${device}"]
  }
}

task spark(type: JavaExec) {
  classpath = sourceSets.main.runtimeClasspath
  main = 'com.salisburyclan.lpviewport.apps.SparkApp'
  if (project.hasProperty('layout')) {
    args = ["--layout=${layout}"]
  }
  if (project.hasProperty('device')) {
    args += ["--device=${device}"]
  }
}

task explode(type: JavaExec) {
  classpath = sourceSets.main.runtimeClasspath
  main = 'com.salisburyclan.lpviewport.apps.ExplodeApp'
  if (project.hasProperty('layout')) {
    args = ["--layout=${layout}"]
  }
  if (project.hasProperty('device')) {
    args += ["--device=${device}"]
  }
}

task sweep(type: JavaExec) {
  classpath = sourceSets.main.runtimeClasspath
  main = 'com.salisburyclan.lpviewport.apps.SweepApp'
  if (project.hasProperty('layout')) {
    args = ["--layout=${layout}"]
  }
  if (project.hasProperty('device')) {
    args += ["--device=${device}"]
  }
}

task diagrotate(type: JavaExec) {
  classpath = sourceSets.main.runtimeClasspath
  main = 'com.salisburyclan.lpviewport.apps.DiagRotateApp'
  if (project.hasProperty('layout')) {
    args = ["--layout=${layout}"]
  }
  if (project.hasProperty('device')) {
    args += ["--device=${device}"]
  }
}
